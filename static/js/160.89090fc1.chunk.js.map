{"version":3,"file":"static/js/160.89090fc1.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/MainTitle/MainTitle.styled.js","components/MainTitle/MainTitle.jsx","components/SectionTitle/SectionTitle.styled.js","components/SectionTitle/SectionTitle.jsx","components/ContactItem/ContactItem.styled.js","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from \"formik\"\n\nexport const Forma = styled(Form)`\n border: 3px solid #00457E;\n display: flex;\n flex-direction: column;\n gap: 15px;\n padding: 40px;\n align-items: center;\n background-color: #D2D2D4;\n`;\nexport const Input = styled(Field)`\npadding: 10px;\nmin-width: 300px;\nborder: 1px solid #16354D;\n`;\nexport const Error = styled(ErrorMessage)`\nfont-size: 15px;\ncolor: red;\n`\nexport const Button = styled.button`\nwidth: 200px;\nheight: 50px;\ncolor: #16354D;\n\nfont-size: 20px;\nfont-weight: bold;\n\nbackground-color: #6B99C3;\ncolor: white;\nborder-radius: 4px;\nborder: none;\n\n&:hover,\n&:focus {\n  border: 3px solid #16354D;\n\n}\n`\nexport const Label = styled.label`\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\ntext-align: center;\nfont-size: 30px;\nfont-weight: bold;\n\ncolor: #6B99C3;\n`\nexport const Title = styled.h1`\n  font-size: 35px;\n  font-weight: bold;\n  text-transform: uppercase;\n  color: #00457E;\n  text-align: center;\n  \n`;","import { useDispatch, useSelector } from 'react-redux';\nimport * as yup from 'yup';\nimport { addContacts } from 'redux/operations';\nimport { getContacts } from 'redux/selectors';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { Formik} from \"formik\"\nimport {Forma, Input, Error, Button, Label} from './ContactForm.styled'\n\nconst initialValues = {\n    name: '',\n    number: '',\n}\n\nconst shema = yup.object().shape({\n    name: yup.string().required(),\n});\n\nexport const ContactForm = () => {\n    const contacts = useSelector(getContacts);\n    const dispatch = useDispatch();\n    const handleSubmit = (values, { resetForm }) => {\n        if (\n            contacts.items.some(\n              contact =>\n                contact.name.toLowerCase() === values.name.toLowerCase().trim()\n            )\n          ) {\n            Notify.failure('This contact is already in the phonebook)');\n          }\n          if (\n            !contacts.items.some(\n              contact =>\n                contact.name.toLowerCase() === values.name.toLowerCase().trim()\n            )\n          ) {\n            dispatch(addContacts(values));\n            Notify.success('Contact saved successfully)');\n          }\n        resetForm();\n    };\n    return(\n        <Formik\n        initialValues={initialValues}\n        validationSchema={shema}\n        onSubmit={handleSubmit}\n        >\n           <Forma autoComplete=\"off\">\n                <Label htmlFor=\"name\">\n                    Name\n                    <Input\n                            type=\"text\"\n                            name=\"name\"\n                            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                            required\n                />\n\n                <Error name=\"name\" component=\"p\" />\n                </Label>\n                <Label htmlFor=\"number\">\n                    Number\n                    <Input\n                             type=\"tel\"\n                             name=\"number\"\n                             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                             title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                             required\n                />\n\n                <Error name=\"number\" component=\"p\" />\n                </Label>\n                <Button type=\"submit\">Add contact</Button>\n            </Forma>\n        </Formik>\n   \n    )\n}","import styled from '@emotion/styled';\n\nexport const Title = styled.h1`\n    text-transform: uppercase;\n    font-size: 55px;\n    color: #00457E;\n`;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Title } from './MainTitle.styled';\n\n\nexport const MainTitle = ({title}) => {\n return (\n    <Title>{title}</Title>\n    )\n}\n\nMainTitle.propTypes = {\n    title: PropTypes.string.isRequired,\n  };","import styled from '@emotion/styled';\n\nexport const Title = styled.h2`\n  font-size: 55px;\n  color: #00457E;\n  text-align: center;\n  `;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Title } from './SectionTitle.styled';\n\nexport const SectionTitle = ({title}) => {\n    return(\n       \n        <Title>{title}</Title>\n       \n    )\n}\n\nSectionTitle.propTypes = {\n    title: PropTypes.string.isRequired,\n  };","import styled from '@emotion/styled';\n\nexport const Item  = styled.li`\ndisplay: flex;\ngap: 30px;\nmargin-bottom: 10px;\njustify-content: space-between;\n\n`\nexport const Span = styled.span`\nfont-size: 30px;\ncolor: #0C151C;\n`\nexport const Button = styled.button`\nbackground-color: #6B99C3;\ncolor: white;\nborder-radius: 4px;\nborder: none;\n`","\nimport { useDispatch } from 'react-redux';\nimport {Item, Span, Button} from './ContactItem.styled'\n\n\nimport { deleteContact } from 'redux/operations';\n\nexport const ContactItem  = ({id, name, number}) => {\n    const dispatch = useDispatch();\n    return(\n        <Item key = {id}>\n            <Span>{name}</Span>\n            <Span>{number}</Span>\n            <Button  type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n        Delete\n      </Button>\n        </Item>\n    )\n};\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\nlist-style: none;\npadding: 0;\n`","// import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts, getFilter } from 'redux/selectors';\nimport { ContactItem } from \"components/ContactItem/ContactItem\";\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { List} from './ContactList.styled'\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/operations';\n\nconst filtered = (contacts, filter) => {\n  let filterContacts = null;\n  if (filter === '') {\n    filterContacts = contacts;\n    return filterContacts;\n  }\n  const normalizedFilter = filter.toLowerCase();\n  filterContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n  if (filterContacts.length < 1) {\n    Notify.warning('There are not contact in phonebook');\n  }\n  return filterContacts;\n};\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const { items } = useSelector(getContacts);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n \n  const filter = useSelector(getFilter);\n  const visibleContacts = filtered(items, filter.filter);\n  return (\n    <List>\n      {visibleContacts.map(state => {\n        console.log(state);\n        return (\n          <ContactItem\n            name={state.name}\n            key={state.id}\n            number={state.number}\n            id={state.id}\n          />\n        );\n      })}{' '}\n    </List>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Input = styled.input`\npadding: 10px;\nmin-width: 300px;\nborder: 1px solid #16354D;\n`;\n\nexport const Label = styled.label`\ndisplay: flex;\nflex-direction: column;\ngap: 10px;\ntext-align: center;\nfont-size: 30px;\nfont-weight: bold;\ncolor: #6B99C3;\n`","import { Input, Label } from './Filter.styled';\nimport { useSelector } from 'react-redux';\nimport { getFilter } from 'redux/selectors';\nimport { addFilter } from 'redux/contactsSlice';\nimport { useDispatch } from 'react-redux';\n\nexport const Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n  const changeFilter = e => {\n    dispatch(addFilter(e.currentTarget.value));\n  };\n  return (\n    <Label htmlFor='filter'>\n      Find contacts by name\n      <Input type=\"text\" onChange={changeFilter} value={filter.filter}></Input>\n    </Label>\n  );\n};\n\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { MainTitle } from 'components/MainTitle/MainTitle';\nimport { SectionTitle } from 'components/SectionTitle/SectionTitle';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\n\nexport default function Contacts() {\n  return (\n    <div\n      style={{\n        width: '1000px',\n        margin: '0 auto',\n        display: 'flex',\n        justifyContent: 'space-around',\n        alignItems: 'center',\n        \n      }}\n    >\n      <div>\n      <MainTitle title='Phonebook'/>\n      <ContactForm />\n      </div>\n      <div>\n      <SectionTitle title=\"Contacts\"/>\n      <Filter />\n      \n      <ContactList />\n      </div>\n    \n    </div>\n  );\n}"],"names":["Forma","styled","Form","Input","Field","Error","ErrorMessage","Button","Label","Title","initialValues","name","number","shema","yup","shape","required","ContactForm","contacts","useSelector","getContacts","dispatch","useDispatch","validationSchema","onSubmit","values","resetForm","items","some","contact","toLowerCase","trim","Notify","addContacts","autoComplete","htmlFor","type","pattern","title","component","MainTitle","SectionTitle","Item","Span","ContactItem","id","onClick","deleteContact","List","ContactList","useEffect","fetchContacts","visibleContacts","filter","filterContacts","normalizedFilter","includes","length","filtered","getFilter","map","state","console","log","Filter","onChange","e","addFilter","currentTarget","value","Contacts","style","width","margin","display","justifyContent","alignItems"],"sourceRoot":""}